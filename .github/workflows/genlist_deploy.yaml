name: Deploy Generate list cloud run

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.TF_VAR_GCP_CREDENTIALS }}'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Export from poetry to requirements.txt
        uses: divideprojects/poetry-export-requirements-action@v1
        with:
          without-hashes: true
          outfile-name: src/requirements.txt

      # Build the Docker image
      - name: Build Docker image
        run: docker build -t us-east1-docker.pkg.dev/yonidev/generate-list-run-image:latest .

      - name: Docker auth
        run: gcloud auth configure-docker us-east1-docker.pkg.dev

      - name: Crete repository
        run: gcloud artifacts repositories create generate-list-run-image --location us-east1 --project yonidev --repository-format


      # Push the image to Artifact Registry
      - name: Push Docker image
        run: docker push us-east1-docker.pkg.dev/yonidev/generate-list-run-image:latest

      - name: Create pub/sub topic
        run: |
          gcloud pubsub topics create generate-list-topic || true

      - name: Deploy Cloud Run
        run: |
          gcloud run deploy generate-list-run \
          --region us-east1 \
          --image us-east1-docker.pkg.dev/yonidev/generate-list-run-image:latest \
          --allow-unauthenticated \
          --memory 1024M \
          --set-env-vars GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }},USER1=${{ secrets.USER1 }},PASSWORD1=${{ secrets.PASSWORD1 }},REDIS_HOST=${{ secrets.REDIS_HOST }},REDIS_PORT=${{ secrets.REDIS_PORT }},REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

      - name: Extract Service URL
        id: extract_url
        run: |
          # Script to extract service URL from deployment output
          echo "::set-output name=url::$(gcloud run services describe generate-list-run --region=us-east1 --format='value(status.url)')"

      - name: Create subscription
        run: |
          gcloud pubsub subscriptions create myRunSubscription --topic generate-list-topic \
          --ack-deadline=600 \
          --push-endpoint=${{ steps.extract_url.outputs.url }}/ \
          --push-auth-service-account=cloud-run-pubsub-invoker@yonidev.iam.gserviceaccount.com || true
          
